{"version":3,"sources":["App.js","parser.js","serviceWorker.js","index.js"],"names":["Title","CodeForm","props","keyDown","bind","e","keyCode","which","this","tabKey","preventDefault","text","document","getElementById","start","selectionStart","end","selectionEnd","value","substring","onSubmit","handleSubmit","name","id","code","onChange","handleChange","onKeyDown","rows","cols","wrap","autoComplete","autoFocus","type","React","Component","App","state","setState","target","IIFEFunction","convertToIIFEFunction","console","log","eval","IIFEify","callback","val","parse","undefined","program","body","declarations","init","handleForStatement","node","incVal","initVal","testLim","test","right","testOp","operator","update","times","incOp","constant","Math","floor","countTimes","unshift","i","handleNode","consequent","handleIfStatement","argument","callee","handleReturnStatement","varName","handleVariableDeclaration","handleWhileStatement","abstractSyntaxTree","ast","func","forEach","arr","convertToIIFEAST","generate","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.40445d0c.chunk.js","sourcesContent":["import React from 'react';\n\nimport './App.css';\n\nimport { convertToIIFEFunction } from './parser';\n\nfunction Title() {\n    return <h1>Spy Code!</h1>;\n}\n\nclass CodeForm extends React.Component {\n    constructor(props) {\n        super(props);\n        this.keyDown = this.keyDown.bind(this);\n    }\n\n    keyDown(e) {\n        if (e.keyCode === 9 || e.which === 9) {\n            this.tabKey(e);\n        }\n    }\n\n    tabKey(e) {\n        e.preventDefault();\n        const text = document.getElementById('code');\n        const start = text.selectionStart;\n        const end = text.selectionEnd;\n        const value = text.value;\n        text.value = value.substring(0, start) + '\\t' + value.substring(end);\n        text.selectionEnd = start + 1;\n    }\n\n    render() {\n        return (\n            <form\n                onSubmit={this.props.handleSubmit}\n            >\n                <textarea\n                    name=\"code\"\n                    id=\"code\"\n                    value={this.props.code}\n                    onChange={this.props.handleChange}\n                    onKeyDown={this.keyDown}\n                    rows=\"20\"\n                    cols=\"50\"\n                    wrap=\"hard\"\n                    autoComplete=\"off\"\n                    autoFocus\n                ></textarea>\n                <br />\n                <input type=\"submit\" value=\"submit\"></input>\n            </form>\n        );\n    }\n}\n\nclass App extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            code: (\n                'function add(a) { \\n' +\n                '\\tconst b = 1\\n' + \n                '\\treturn a + b\\n' +\n                '}\\n' +\n                '\\n' +\n                'add(1);' \n            )\n        };\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleChange(e) {\n        this.setState({code: e.target.value});\n    }\n\n    handleSubmit(e) {\n        e.preventDefault();\n        const IIFEFunction = convertToIIFEFunction(this.state.code);\n        // console.log(IIFEFunction)\n        console.log(eval(IIFEFunction));\n    }\n\n    render() {\n        return (\n            <div>\n                <Title></Title>\n                <CodeForm\n                    code={this.state.code}\n                    handleSubmit={this.handleSubmit}\n                    handleChange={this.handleChange}\n                ></CodeForm>\n            </div>\n        )\n    }\n\n}\n\nexport default App;\n","import { parse } from '@babel/parser';\nimport generate from '@babel/generator';\n\nfunction IIFEify(callback, val) {\n    // Returns IIFE embedded within function because IIFE on it's \n    // own parses differently for AST\n    const func = parse(`\n        function urmom() {\n            const a = (() => {\n                ${callback()}\n                return ${val ? val : undefined};\n            })();\n        }`);\n\n    const iife = func.program.body[0].body.body[0].declarations[0].init;\n    return iife;\n}\n\n/**\n * Calculates the amount of times a for loop\n * is executed.\n * \n * @param {number} initVal for loop initializer value\n * @param {number} testLim for loop test limit\n * @param {string} testOp for loop test operator\n * @param {string} incOp for loop incrementor operator\n * @param {number} incVal for loop incrementor value\n */\nfunction countTimes(initVal, testLim, testOp, incOp, incVal) {\n    let constant = 0;\n\n    if (testOp === '>') {\n        initVal = -initVal;\n        testLim = -testLim;\n    } else if (testOp === '>=') {\n        initVal = -initVal;\n        testLim = -testLim;\n        constant = 1;\n    } else if (testOp === '<=') {\n        constant = 1;\n    }\n\n    return Math.floor((testLim - initVal) / incVal) + constant;\n}\n\nfunction handleForStatement(node) {\n    const initVal = node.init.declarations[0].init.value;\n    const testLim = node.test.right.value;\n    const testOp = node.test.operator;\n    const incOp = node.update.operator;\n\n    let incVal;\n\n    try {\n        incVal = node.update.right.value;\n    } catch {\n        incVal = 1;\n    }\n    \n    const times = countTimes(initVal, testLim, testOp, incOp, incVal);\n    console.log('times', times);\n\n\n    const cb = () => {\n        for (let i = initVal; i < times; i++) {\n            console.log('for loop');\n        }\n    }\n\n    node.body.body.unshift(IIFEify(cb));\n    return node;\n}\n\nfunction handleWhileStatement(node) {\n    return node;\n}\n\nfunction handleExpressionStatement(node) {\n    return node;\n}\n\nfunction handleVariableDeclaration(node) {\n    const varName = node.declarations[0].id.name;\n    const val = node.declarations[0].init.value;\n    const cb = () => {\n        console.log(`Assigning variable ${varName} value ${val}`);\n    }\n\n    node.declarations[0].init = IIFEify(cb, val);\n    return node;\n}\n\nfunction handleIfStatement(node) {\n    const cb = () => {\n        console.log('if statement');\n    }\n    node.consequent.body.unshift(IIFEify(cb));\n    return node;\n}\n\nfunction handleReturnStatement(node) {\n    const cb = () => {\n        console.log('return statement');\n    }\n    node.argument.callee = IIFEify(cb);\n    return node;\n}\n\nfunction handleNode(node) {\n    switch (node.type) {\n        case 'IfStatement':\n            return handleIfStatement(node);\n        case 'ReturnStatement':\n            return handleReturnStatement(node);\n        case 'ForStatement':\n            return handleForStatement(node);\n        case 'VariableDeclaration':\n            return handleVariableDeclaration(node);\n        case 'ExpressionStatement':\n            return handleExpressionStatement(node);\n        case 'WhileStatement':\n            return handleWhileStatement(node);\n        default:\n            break;\n    }\n}\n\n/**\n * @param {function} func \n * \n * This function takes a function as input\n * and converts all of its nodes to an\n * immediately invoked function expression (IIFE)\n * abstract syntax tree (AST) version of it.\n */\nfunction convertToIIFEAST(func) {\n    const ast = parse(func);\n    const body = ast.program.body[0].body.body;\n\n    body.forEach((node, i, arr) => {\n        arr[i] = handleNode(node);\n    });\n\n    ast.program.body[0].body.body = body;\n    return ast;\n}\n\n/**\n * \n * @param {any} abstractSyntaxTree\n * \n * Takes as input an abstract syntax tree\n * and converts it back into an executable\n * function.\n */\nfunction convertToIIFEFunction(abstractSyntaxTree) {\n    const ast = convertToIIFEAST(abstractSyntaxTree);\n    return generate(ast).code;\n}\n\nexport { convertToIIFEFunction }","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}